package com.springers.SERVICES;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.springers.ENTITIES.AccountStatus;
import com.springers.ENTITIES.Offer;
import com.springers.ENTITIES.Student;
import com.springers.REPOSITORIES.OfferApplicationRepo;
import com.springers.REPOSITORIES.OfferRepo;

import jakarta.persistence.EntityNotFoundException;
import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class Service_Offer {
	@Autowired
	OfferRepo offerRepo; 
	
	@Autowired
	OfferApplicationRepo appRepo; 
	
	public void ajouter_Offer(Offer offre){
		Offer offre2 = offerRepo.save(offre);
	}

	public void supprimer_Offer(Long id){
		// Retrieve the student entity from the database
        Offer offer = offerRepo.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Offer not found with id: " + id));
        
		if(offer.getOfferApplications().size() == 0) {
			offerRepo.deleteById(id);
		} else {
			ChangeOfferStatus(id,false);
		}
	}

	public List<Offer> afficher_Offers(){
		List<Offer> offers = (List<Offer>) offerRepo.findAll();
		return offers;
	}
	
	public Offer getOfferById(Long id) {
        return offerRepo.findById(id).orElse(null);
    }
	
	@Transactional
    public void ChangeOfferStatus(Long offerId, Boolean NewStatus) {
		// Retrieve the student entity from the database
        Offer offer = offerRepo.findById(offerId)
                .orElseThrow(() -> new EntityNotFoundException("Offer not found with id: " + offerId));
        
        offer.setIsActive(NewStatus);
        offerRepo.save(offer);
	}
	
	
	public List<Offer> searchOffersByNomSociete(String Query) {
		List<Offer> offers = (List<Offer>) offerRepo.findByNomSocieteContainingIgnoreCase(Query);
		return offers;
    }
	
	public List<Offer> searchOffersByDomaine(String Query) {
		List<Offer> offers = (List<Offer>) offerRepo.findByTitleContainingIgnoreCase(Query);
		return offers;
    }
	
	public List<Offer> searchOffersBySpecialization(String Query) {
		List<Offer> offers = (List<Offer>) offerRepo.findBySpecializationContaining(Query);
		return offers;
    }
	
}
